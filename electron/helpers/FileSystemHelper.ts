import * as fs from 'fs/promises';
import * as path from 'path';

// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
export class FileSystemHelper {
  /**
   * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   */
  public async readFile(filePath: string): Promise<string> {
    try {
      return await fs.readFile(filePath, 'utf-8');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`);
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   */
  public async writeFile(filePath: string, content: string): Promise<void> {
    try {
      const directory = path.dirname(filePath);
      await this.ensureDirectoryExists(directory);
      
      await fs.writeFile(filePath, content, 'utf-8');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: ${error}`);
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   * @param encoding - –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é utf-8)
   */
  public async writeFileWithEncoding(filePath: string, content: string, encoding: BufferEncoding = 'utf-8'): Promise<void> {
    try {
      const directory = path.dirname(filePath);
      await this.ensureDirectoryExists(directory);
      
      // –î–ª—è PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Windows –¥–æ–±–∞–≤–ª—è–µ–º BOM
      if (path.extname(filePath).toLowerCase() === '.ps1' && process.platform === 'win32') {
        const fileBuffer = this.addBOMForPowerShell(content);
        await fs.writeFile(filePath, fileBuffer);
      } else {
        await fs.writeFile(filePath, content, encoding);
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: ${error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns true, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  public async fileExists(filePath: string): Promise<boolean> {
    try {
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
   * @param dirPath - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  public async createDirectory(dirPath: string): Promise<void> {
    try {
      await fs.mkdir(dirPath, { recursive: true });
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: ${error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å
   * @param path - –ø—É—Ç—å
   * @returns true, –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  public async pathExists(path: string): Promise<boolean> {
    try {
      await fs.access(path);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
   * @param path - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
   * @returns —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
   */
  public async getFilesInDirectory(path: string): Promise<string[]> {
    try {
      const files = await fs.readdir(path);
      return files;
    } catch (error) {
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞—è –ª–∏ –ø–∞–ø–∫–∞
   * @param path - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
   * @returns true, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  public async isDirectoryEmpty(path: string): Promise<boolean> {
    try {
      const files = await fs.readdir(path);
      return files.length === 0;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–¥–∏–Ω –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ
   * @param innerPath - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
   * @param outerPath - –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å
   * @returns true, –µ—Å–ª–∏ innerPath –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ outerPath
   */
  public isPathInside(innerPath: string, outerPath: string): boolean {
    try {
      const normalizedInnerPath = path.resolve(innerPath);
      const normalizedOuterPath = path.resolve(outerPath);
      
      return normalizedInnerPath.startsWith(normalizedOuterPath + path.sep) || 
             normalizedInnerPath === normalizedOuterPath;
    } catch (error) {
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   * @param directoryPath - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
   */
  public async ensureDirectoryExists(directoryPath: string): Promise<void> {
    try {
      await fs.mkdir(directoryPath, { recursive: true });
      console.log(`–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: ${directoryPath}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ ${directoryPath}:`, error);
      throw error;
    }
  }

  /**
   * –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª
   * @param sourcePath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param destinationPath - –ø—É—Ç—å –∫ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param onLogCallback - –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  public async copyFile(sourcePath: string, destinationPath: string, onLogCallback?: (message: string) => void): Promise<void> {
    try {
      onLogCallback?.(`[FileSystemHelper] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${sourcePath} -> ${destinationPath}`);
      await fs.copyFile(sourcePath, destinationPath);
      onLogCallback?.(`[FileSystemHelper] ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${sourcePath} -> ${destinationPath}`);
    } catch (error) {
      const errorMessage = `[FileSystemHelper] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`;
      onLogCallback?.(errorMessage);
      throw new Error(errorMessage);
    }
  }

  /**
   * –ö–æ–ø–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
   * @param sourcePath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
   * @param destinationPath - –ø—É—Ç—å –∫ –∫–æ–Ω–µ—á–Ω–æ–π –ø–∞–ø–∫–µ
   * @param onLogCallback - –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  public async copyDirectory(sourcePath: string, destinationPath: string, onLogCallback?: (message: string) => void): Promise<void> {
    try {
      onLogCallback?.(`[FileSystemHelper] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: ${sourcePath} -> ${destinationPath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
      if (!await this.pathExists(sourcePath)) {
        throw new Error(`[FileSystemHelper] –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sourcePath}`);
      }

      // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.createDirectory(destinationPath);
      onLogCallback?.(`[FileSystemHelper] üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${destinationPath}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
      const items = await fs.readdir(sourcePath);
      
      for (const item of items) {
        const sourceItemPath = path.join(sourcePath, item);
        const destinationItemPath = path.join(destinationPath, item);
        
        const stats = await fs.stat(sourceItemPath);
        
        if (stats.isDirectory()) {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –µ—ë
          onLogCallback?.(`[FileSystemHelper] üìÇ –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É: ${item}`);
          await this.copyDirectory(sourceItemPath, destinationItemPath, onLogCallback);
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ
          onLogCallback?.(`[FileSystemHelper] üìÑ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${item}`);
          await fs.copyFile(sourceItemPath, destinationItemPath);
        }
      }
      
      onLogCallback?.(`[FileSystemHelper] ‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${sourcePath} -> ${destinationPath}`);
      
    } catch (error) {
      const errorMessage = `[FileSystemHelper] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ ${sourcePath}: ${error}`;
      onLogCallback?.(errorMessage);
      throw new Error(errorMessage);
    }
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç BOM –¥–ª—è PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Windows
   * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   * @returns –±—É—Ñ–µ—Ä —Å BOM
   */
  private addBOMForPowerShell(content: string): Buffer {
    const BOM = Buffer.from([0xEF, 0xBB, 0xBF]);
    const contentBuffer = Buffer.from(content, 'utf-8');
    return Buffer.concat([BOM, contentBuffer]);
  }
}
