import * as path from 'path';
import { InitProjectResult, ProjectConfig } from '@shared/api';
import { CrmDockerBuilderValidator } from './CrmDockerBuilderValidator';
import { FileSystemHelper } from './FileSystemHelper';
import { DockerProcessHelper } from './DockerProcessHelper';
import { CrmHelper } from './CrmHelper';
import { BashHelper } from './files/BashHelper';
import { SqlHelper } from './files/SqlHelper';
import { VscodeHelper } from './files/VscodeHelper';
import { DockerComposeHelper } from './files/DockerComposeHelper';
import { ConstantValues } from '../config/constants';
import { ProjectHelper } from './ProjectHelper';

// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CRM Docker Builder
export class CrmDockerBuilderHelper {
  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
   */
  private fileSystemHelper: FileSystemHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º
   */
  private projectHelper: ProjectHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private crmDockerBuilderValidatorHelper: CrmDockerBuilderValidator;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ CRM
   */
  private crmHelper: CrmHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å vsdbg —Ñ–∞–π–ª–∞–º–∏
   */
  private vscodeHelper: VscodeHelper;
  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker
   */
  private dockerProcessHelper: DockerProcessHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Bash
   */
  private bashHelper: BashHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ SQL
   */
  private sqlHelper: SqlHelper;

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Docker Compose
   */
  private dockerComposeHelper: DockerComposeHelper;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  constructor() {
    this.crmDockerBuilderValidatorHelper = new CrmDockerBuilderValidator();
    this.fileSystemHelper = new FileSystemHelper();
    this.projectHelper = new ProjectHelper();
    this.vscodeHelper = new VscodeHelper();
    this.dockerProcessHelper = new DockerProcessHelper();
    this.crmHelper = new CrmHelper();
    this.bashHelper = new BashHelper();
    this.sqlHelper = new SqlHelper();
    this.dockerComposeHelper = new DockerComposeHelper();
  }

  /**
   * –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
   * @param projectConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async buildProject(projectConfig: ProjectConfig, onLogCallback?: (log: string) => void): Promise<InitProjectResult> {
    try {
      onLogCallback?.(`[CrmDockerBuilderHelper] üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞`);
      
      const validateResult = await this.crmDockerBuilderValidatorHelper.validateAll(projectConfig, onLogCallback);
      if (!validateResult.success) {
        return {
          success: false,
          projectConfig: null,
          message: validateResult.message
        };
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º vsdbg —Ñ–∞–π–ª—ã
      await this.vscodeHelper.buildVsdbgFilesWithLogs(projectConfig, onLogCallback);
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª docker-compose.yml (–±–µ–∑ –Ω–æ–≤—ã—Ö CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
      await this.buildDockerComposeFile(projectConfig, false, onLogCallback);
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã CRM
      await this.crmHelper.handleCrmFiles(projectConfig, onLogCallback);

      onLogCallback?.(`[CrmDockerBuilderHelper] ‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω`);

      return {
        success: true,
        message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω',
        projectConfig: projectConfig
      };
    }
    catch (error) {
      onLogCallback?.(`[CrmDockerBuilderHelper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error instanceof Error ? error.message : String(error)}`);
      return {
        success: false,
        projectConfig: null,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç
   * @param projectConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async runProject(projectConfig: ProjectConfig, onLogCallback?: (log: string) => void): Promise<InitProjectResult> {
    try {
      // –ü—Ä–æ–±–ª–µ–º–∞:
      // –ï—Å–ª–∏ CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —Å –ë–î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, —Ç–æ docker-compose –ø–∞–¥–∞–µ—Ç –≤ –æ—à–∏–±–∫—É
      // –¢–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –ë–î –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
      // –ü–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –±–µ–∑ –Ω–æ–≤—ã—Ö CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–≤–æ—Å—Å—Ç–∞–Ω–≤–ª–∏–≤–∞–µ–º –ë–î –Ω–æ–≤—ã—Ö CRM)
      // –ê –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —Å –Ω–æ–≤—ã–º–∏ CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
      let secondRun = false;
      
      onLogCallback?.(`[CrmDockerBuilderHelper] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞`);
      
      const validateResult = await this.crmDockerBuilderValidatorHelper.validateAll(projectConfig);
      if (!validateResult.success) {
        return {
          success: false,
          projectConfig: null,
          message: validateResult.message
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
      if (!await this.dockerProcessHelper.isDockerInstalled()) {
        throw new Error('Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }

      if (!await this.dockerProcessHelper.isDockerRunning()) {
        throw new Error('Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
      await this.dockerProcessHelper.createDockerNetwork(`${projectConfig.projectName}${ConstantValues.NETWORK_PREFIX}`, onLogCallback);
      // –ó–∞–ø—É—Å–∫–∞–µ–º Docker Compose
      await this.dockerProcessHelper.startDockerCompose(projectConfig.projectPath, projectConfig.projectName, onLogCallback);

      await this.sleep(5000);

      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤ PostgreSQL
      await this.buildPostgresRestoreScript(projectConfig, onLogCallback);
      // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤ PostgreSQL –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
      await this.dockerProcessHelper.executeDockerCommandWithLogs(
        ['exec', projectConfig.postgresConfig.containerName, 'chmod', '+x', `${ConstantValues.FOLDER_NAMES.POSTGRES_PATHS_DOCKER.POSTGRES_DATA}/${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT}`], 
        projectConfig.projectPath, 
        onLogCallback
      );
      // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
      await this.buildCreateTypeCastsPostgreSql(projectConfig, onLogCallback);

      for (const crmConfig of projectConfig.crmConfigs) {
        // –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø –≤ –ø–∞–ø–∫—É postgres-volumes
        await this.fileSystemHelper.copyFile(
          crmConfig.backupPath,
          path.join(
            projectConfig.postgresConfig.volumePath,
            ConstantValues.FOLDER_NAMES.POSTGRES_PATHS.POSTGRES_DATA,
            `${crmConfig.containerName}.backup`
          ),
          onLogCallback
        );
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤ PostgreSQL
        await this.dockerProcessHelper.executeDockerCommandWithLogs(
          ['exec', projectConfig.postgresConfig.containerName, 'bash', '-c', `${ConstantValues.FOLDER_NAMES.POSTGRES_PATHS_DOCKER.POSTGRES_DATA}/${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT} ${crmConfig.containerName} ${projectConfig.postgresConfig.user} ${ConstantValues.FOLDER_NAMES.POSTGRES_PATHS_DOCKER.POSTGRES_DATA}`], 
          projectConfig.projectPath, 
          onLogCallback
        );

        if (!crmConfig.runOn) {
          secondRun = true;
        }
      }

      onLogCallback?.(`[CrmDockerBuilderHelper] ‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);

      if (secondRun) {
        onLogCallback?.(`[CrmDockerBuilderHelper] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–≤—Ç–æ—Ä–æ–π —Ä–∞–∑)`);
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª docker-compose.yml (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã)
        await this.buildDockerComposeFile(projectConfig, true, onLogCallback);
        // –ó–∞–ø—É—Å–∫–∞–µ–º Docker Compose (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã)
        await this.dockerProcessHelper.startDockerCompose(projectConfig.projectPath, projectConfig.projectName, onLogCallback);
        onLogCallback?.(`[CrmDockerBuilderHelper] ‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (–≤—Ç–æ—Ä–æ–π —Ä–∞–∑)`);
      }

      for (const crmConfig of projectConfig.crmConfigs) {
        const vsdbgPath = path.join(crmConfig.volumePath, ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.VSDBG);
        const vsdgPathExists = await this.fileSystemHelper.pathExists(vsdbgPath);

        if (!vsdgPathExists) {
          // –ö–æ–ø–∏—Ä—É–µ–º vsdbg —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          await this.fileSystemHelper.copyDirectory(path.join(projectConfig.projectPath, ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.VSDBG), path.join(crmConfig.volumePath, ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.VSDBG), onLogCallback);
          // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª vsdbg –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
          await this.dockerProcessHelper.executeDockerCommandWithLogs(
            ['exec', crmConfig.containerName, 'chmod', '+x', `${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.APP}/${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.VSDBG}`], 
            projectConfig.projectPath, 
            onLogCallback
          );
        }
        // // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª app-handler.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        // await this.dockerProcessHelper.executeDockerCommandWithLogs(
        //   ['exec', crmConfig.containerName, 'chmod', '+x', `${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.APP}/${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.PROJ_FILES}/${ConstantValues.FILE_NAMES.APP_HANDLER}`], 
        //   projectConfig.projectPath, 
        //   onLogCallback
        // );
        // // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª workspace-console-handler.sh –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        // await this.dockerProcessHelper.executeDockerCommandWithLogs(
        //   ['exec', crmConfig.containerName, 'chmod', '+x', `${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.APP}/${ConstantValues.FOLDER_NAMES.CRM_PATHS_DOCKER.PROJ_FILES}/${ConstantValues.FILE_NAMES.WORKSPACE_CONSOLE_HANDLER}`], 
        //   projectConfig.projectPath, 
        //   onLogCallback
        // );

        // –û—á–∏—â–∞–µ–º Redis –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.dockerProcessHelper.executeDockerCommandWithLogs(
          ['exec', projectConfig.redisConfig.containerName, 'redis-cli', 'FLUSHALL'], 
          projectConfig.projectPath, 
          onLogCallback
        );

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä CRM
        await this.dockerProcessHelper.executeDockerCommandWithLogs(
          ['restart', crmConfig.containerName], 
          projectConfig.projectPath, 
          onLogCallback
        );

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø–æ–º–µ—á–∞–µ–º CRM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–∞—Ç–æ–π –∑–∞–ø—É—Å–∫–∞
        crmConfig.runOn = new Date();
        await this.projectHelper.saveCrmSetting(projectConfig, crmConfig);
      }
      
      return {
        success: true,
        message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
        projectConfig: projectConfig
      };
    }
    catch (error) {
      onLogCallback?.(`[CrmDockerBuilderHelper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error instanceof Error ? error.message : String(error)}`);
      return {
        success: false,
        projectConfig: null,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª docker-compose.yml
   * @param projectConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   * @returns - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ docker-compose.yml
   */
  private async buildDockerComposeFile(projectConfig: ProjectConfig, secondRun: boolean, onLog?: (log: string) => void): Promise<void> {
      try {
          const dockerComposeFile = this.dockerComposeHelper.generateDockerComposeContent(projectConfig, secondRun);
          const filePath = path.join(projectConfig.projectPath, ConstantValues.FILE_NAMES.DOCKER_COMPOSE);
          await this.fileSystemHelper.writeFile(filePath, dockerComposeFile);
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚úÖ –§–∞–π–ª ${ConstantValues.FILE_NAMES.DOCKER_COMPOSE} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      } catch (error) {
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${ConstantValues.FILE_NAMES.DOCKER_COMPOSE}: ${error}`);

          throw error;
      }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª ${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT}
   * @param projectConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   * @returns - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT}
   */
  private async buildPostgresRestoreScript(projectConfig: ProjectConfig, onLog?: (log: string) => void): Promise<void> {
      try {
          const postgresRestoreScript = this.bashHelper.generatePostgresRestoreScriptContent();
          const filePath = path.join(
            projectConfig.projectPath,
            ConstantValues.FOLDER_NAMES.POSTGRES_VOLUMES,
            ConstantValues.FOLDER_NAMES.POSTGRES_PATHS.POSTGRES_DATA,
            ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT
          );
          await this.fileSystemHelper.writeFile(filePath, postgresRestoreScript);
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚úÖ –§–∞–π–ª ${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      } catch (error) {
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${ConstantValues.FILE_NAMES.POSTGRES_RESTORE_SCRIPT}: ${error}`);

          throw error;
      }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª ${ConstantValues.FILE_NAMES.CREATE_TYPE_CASTS_POSTGRES_SQL}
   * @param projectConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   * @returns - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${ConstantValues.FILE_NAMES.CREATE_TYPE_CASTS_POSTGRES_SQL}
   */
  private async buildCreateTypeCastsPostgreSql(projectConfig: ProjectConfig, onLog?: (log: string) => void): Promise<void> {
      try {
          const createTypeCastsPostgreSql = this.sqlHelper.generateCreateTypeCastsPostgreSqlContent();
          const filePath = path.join(
            projectConfig.projectPath,
            ConstantValues.FOLDER_NAMES.POSTGRES_VOLUMES,
            ConstantValues.FOLDER_NAMES.POSTGRES_PATHS.POSTGRES_DATA,
            ConstantValues.FILE_NAMES.CREATE_TYPE_CASTS_POSTGRES_SQL
          );
          await this.fileSystemHelper.writeFile(filePath, createTypeCastsPostgreSql);
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚úÖ –§–∞–π–ª ${ConstantValues.FILE_NAMES.CREATE_TYPE_CASTS_POSTGRES_SQL} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      } catch (error) {
          onLog?.(`[CrmDockerBuilderFileSystemHelper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${ConstantValues.FILE_NAMES.CREATE_TYPE_CASTS_POSTGRES_SQL}: ${error}`);

          throw error;
      }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   * @param ms - –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  private async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
