const { createCanvas } = require('canvas');
const fs = require('fs');
const path = require('path');

function createPNGIcon(size = 512) {
  const canvas = createCanvas(size, size);
  const ctx = canvas.getContext('2d');

  // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
  const gradient = ctx.createLinearGradient(0, 0, size, size);
  gradient.addColorStop(0, '#4f46e5'); // –ò–Ω–¥–∏–≥–æ
  gradient.addColorStop(0.5, '#7c3aed'); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  gradient.addColorStop(1, '#ec4899'); // –†–æ–∑–æ–≤—ã–π

  // –†–∏—Å—É–µ–º —Ñ–æ–Ω —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
  ctx.fillStyle = gradient;
  ctx.beginPath();
  ctx.roundRect(0, 0, size, size, size * 0.12);
  ctx.fill();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ç–µ–Ω—å
  ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
  ctx.shadowBlur = size * 0.02;
  ctx.shadowOffsetX = 0;
  ctx.shadowOffsetY = size * 0.01;

  // –†–∏—Å—É–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–±–æ–ª–µ–µ —É–∑–Ω–∞–≤–∞–µ–º—ã–π)
  const containerX = size * 0.15;
  const containerY = size * 0.2;
  const containerWidth = size * 0.7;
  const containerHeight = size * 0.4;

  // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–µ)
  ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';
  ctx.beginPath();
  ctx.roundRect(containerX, containerY + size * 0.1, containerWidth, containerHeight, size * 0.03);
  ctx.fill();

  // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è)
  ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
  ctx.beginPath();
  ctx.roundRect(containerX, containerY, containerWidth, size * 0.1, size * 0.03);
  ctx.fill();

  // –ö—Ä—ã—à–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º (–±–æ–ª–µ–µ —è—Ä–∫–∞—è)
  const lidGradient = ctx.createLinearGradient(containerX, containerY, containerX + containerWidth, containerY);
  lidGradient.addColorStop(0, '#6366f1');
  lidGradient.addColorStop(1, '#8b5cf6');
  
  ctx.fillStyle = lidGradient;
  ctx.beginPath();
  ctx.roundRect(containerX + size * 0.02, containerY + size * 0.02, containerWidth - size * 0.04, size * 0.06, size * 0.025);
  ctx.fill();

  // –†–∏—Å—É–µ–º Docker –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –∫—Ä—ã—à–∫–µ (–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π)
  ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';
  ctx.font = `bold ${size * 0.05}px Arial`;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillText('üê≥', containerX + containerWidth * 0.5, containerY + size * 0.05);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–Ω–∏
  ctx.shadowColor = 'transparent';
  ctx.shadowBlur = 0;
  ctx.shadowOffsetX = 0;
  ctx.shadowOffsetY = 0;

  // –†–∏—Å—É–µ–º CRM —Å–∏–º–≤–æ–ª—ã (–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ –∏ —á–µ—Ç–∫–∏–µ)
  const usersX = size * 0.7;
  const usersY = size * 0.7;
  const userRadius = size * 0.04;

  // –§–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π)
  ctx.fillStyle = 'rgba(255, 255, 255, 0.15)';
  ctx.beginPath();
  ctx.roundRect(usersX - size * 0.03, usersY - size * 0.03, size * 0.22, size * 0.15, size * 0.025);
  ctx.fill();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º (–±–æ–ª–µ–µ —è—Ä–∫–∏–µ)
  const userGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, userRadius);
  userGradient.addColorStop(0, 'rgba(255, 255, 255, 0.95)');
  userGradient.addColorStop(1, 'rgba(255, 255, 255, 0.8)');

  ctx.fillStyle = userGradient;
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 (–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π)
  ctx.beginPath();
  ctx.arc(usersX + size * 0.05, usersY + size * 0.05, userRadius, 0, 2 * Math.PI);
  ctx.fill();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 (–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π)
  ctx.beginPath();
  ctx.arc(usersX + size * 0.15, usersY + size * 0.05, userRadius, 0, 2 * Math.PI);
  ctx.fill();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 (–±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π)
  ctx.beginPath();
  ctx.arc(usersX + size * 0.1, usersY + size * 0.1, userRadius, 0, 2 * Math.PI);
  ctx.fill();

  // –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–±–æ–ª–µ–µ —Ç–æ–ª—Å—Ç—ã–µ –∏ —è—Ä–∫–∏–µ)
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
  ctx.lineWidth = size * 0.012;
  ctx.lineCap = 'round';
  
  // –õ–∏–Ω–∏—è 1-3
  ctx.beginPath();
  ctx.moveTo(usersX + size * 0.05, usersY + size * 0.05);
  ctx.lineTo(usersX + size * 0.1, usersY + size * 0.1);
  ctx.stroke();

  // –õ–∏–Ω–∏—è 2-3
  ctx.beginPath();
  ctx.moveTo(usersX + size * 0.15, usersY + size * 0.05);
  ctx.lineTo(usersX + size * 0.1, usersY + size * 0.1);
  ctx.stroke();

  // –õ–∏–Ω–∏—è 1-2
  ctx.beginPath();
  ctx.moveTo(usersX + size * 0.05, usersY + size * 0.05);
  ctx.lineTo(usersX + size * 0.15, usersY + size * 0.05);
  ctx.stroke();

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  // –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ç–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
  const dotRadius = size * 0.008;
  
  // –¢–æ—á–∫–∏ –≤ —É–≥–ª–∞—Ö
  ctx.beginPath();
  ctx.arc(containerX - size * 0.02, containerY - size * 0.02, dotRadius, 0, 2 * Math.PI);
  ctx.fill();
  
  ctx.beginPath();
  ctx.arc(containerX + containerWidth + size * 0.02, containerY - size * 0.02, dotRadius, 0, 2 * Math.PI);
  ctx.fill();
  
  ctx.beginPath();
  ctx.arc(containerX - size * 0.02, containerY + containerHeight + size * 0.12, dotRadius, 0, 2 * Math.PI);
  ctx.fill();
  
  ctx.beginPath();
  ctx.arc(containerX + containerWidth + size * 0.02, containerY + containerHeight + size * 0.12, dotRadius, 0, 2 * Math.PI);
  ctx.fill();

  return canvas.toBuffer('image/png');
}

// –°–æ–∑–¥–∞–µ–º PNG –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
const sizes = [16, 32, 48, 64, 128, 256, 512, 1024];
const iconsDir = path.join(__dirname, '..', 'electron', 'assets', 'icons');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(iconsDir)) {
  fs.mkdirSync(iconsDir, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º PNG –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
sizes.forEach(size => {
  const pngBuffer = createPNGIcon(size);
  const filename = `icon-${size}x${size}.png`;
  const filepath = path.join(iconsDir, filename);
  
  fs.writeFileSync(filepath, pngBuffer);
  console.log(`–°–æ–∑–¥–∞–Ω–∞ PNG –∏–∫–æ–Ω–∫–∞: ${filename}`);
});

// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
const mainIconBuffer = createPNGIcon(512);
const mainIconPath = path.join(iconsDir, 'icon.png');
fs.writeFileSync(mainIconPath, mainIconBuffer);
console.log('–°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è PNG –∏–∫–æ–Ω–∫–∞: icon.png');

console.log('\nüé® –£–ª—É—á—à–µ–Ω–Ω—ã–µ PNG –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
console.log('‚ú® –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –≤–∫–ª—é—á–∞–µ—Ç:');
console.log('   - –ë–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ –∏ —á–µ—Ç–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
console.log('   - –£–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç "CRM" –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏');
console.log('   - –ë–æ–ª–µ–µ —É–∑–Ω–∞–≤–∞–µ–º—ã–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
console.log('   - –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ CRM');
console.log('   - –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏');
console.log('   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤');
console.log('–¢–µ–ø–µ—Ä—å –∏–∫–æ–Ω–∫–∞ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö!');
