const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Windows...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ Windows –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—é
const isWindows = process.platform === 'win32';
const isMac = process.platform === 'darwin';
const isLinux = process.platform === 'linux';

console.log(`üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}`);
console.log(`üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${process.arch}\n`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function checkRequirements() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ Node.js: ${nodeVersion}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ npm: ${npmVersion}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º electron-builder
    const electronBuilderVersion = execSync('npx electron-builder --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ electron-builder: ${electronBuilderVersion}`);
    
    if (isWindows) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Visual Studio Build Tools
      try {
        execSync('where cl', { encoding: 'utf8' });
        console.log('‚úÖ Visual Studio Build Tools –Ω–∞–π–¥–µ–Ω—ã');
      } catch (error) {
        console.log('‚ö†Ô∏è  Visual Studio Build Tools –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π)');
      }
    }
    
    console.log('');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:', error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏
function buildWindows(arch = null) {
  const archFlag = arch ? ` --${arch}` : '';
  const archName = arch || '–≤—Å–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã';
  
  console.log(`üöÄ –°–±–æ—Ä–∫–∞ –¥–ª—è Windows (${archName})...`);
  
  try {
    const command = `npm run build && electron-builder --win${archFlag}`;
    console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
    
    execSync(command, { 
      stdio: 'inherit',
      env: { ...process.env, FORCE_COLOR: '1' }
    });
    
    console.log(`‚úÖ –°–±–æ—Ä–∫–∞ –¥–ª—è Windows (${archName}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è Windows (${archName}):`, error.message);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏
function checkBuildResults() {
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...');
  
  const distPath = path.join(process.cwd(), 'dist');
  
  if (!fs.existsSync(distPath)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const files = fs.readdirSync(distPath);
  const windowsFiles = files.filter(file => 
    file.includes('.exe') || 
    file.includes('.zip') && file.includes('win')
  );
  
  if (windowsFiles.length === 0) {
    console.log('‚ùå Windows —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Windows —Ñ–∞–π–ª—ã:');
  windowsFiles.forEach(file => {
    const filePath = path.join(distPath, file);
    const stats = fs.statSync(filePath);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
    console.log(`   üì¶ ${file} (${sizeMB} MB)`);
  });
  
  console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    checkRequirements();
    
    // –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
    const success = buildWindows();
    
    if (success) {
      checkBuildResults();
      console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Windows –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Windows –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main();
