# docker-compose -p crm_infrastructure up --detach --wait
services:
  # postgres
  postgres_container:
    container_name: postgres
    image: 'postgres:alpine'
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U puser -d db'"]
      interval: 5s
      timeout: 10s
      retries: 120
    command:
      - "postgres"
      - "-c"
      # Memory Settings
      - "shared_buffers=2GB" # Обычно 25% от общей RAM
      - "-c"
      - "effective_cache_size=6GB" # Обычно 75% от общей RAM
      - "-c"
      # Work Memory - установите в зависимости от предполагаемых запросов
      - "work_mem=32MB" # Память на операцию сортировки, подберите для вашей нагрузки
      - "-c"
      # Maintenance Memory
      - "maintenance_work_mem=512MB" # Память для операций VACUUM, CREATE INDEX
      - "-c"
      # CPU Settings
      # Установите параметры параллельных процессов в соответствии с числом процессоров
      - "max_parallel_workers_per_gather=2"
      - "-c"
      - "max_worker_processes=8"
      - "-c"
      - "max_parallel_workers=8"
      - "-c"
      # Disk and WAL Configuration
      - "wal_level=replica" # Уровень журнала, если не требуется логическая репликация, можно снизить
      - "-c"
      - "checkpoint_completion_target=0.7" # Влияние на частоту контрольных точек
      - "-c"
      # Для SSD можно добавить больше
      - "wal_buffers=16MB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
      - "-c"
      # SSD Tuning
      - "random_page_cost=1.1" # Стоимость случайного доступа, снижено для SSD
      - "-c"
      - "seq_page_cost=1.0" # Стоимость последовательного чтения, обычно 1.0
      - "-c"
      # Connections
      - "max_connections=1000" # Зависит от нагрузки, но старайтесь не устанавливать слишком высокие значения
      - "-c"
      # Other settings
      - "default_statistics_target=100" # Полезно для оптимизации запросов
      - "-c"
      - "log_min_duration_statement=5000" # Логировать запросы, выполняющиеся более 5 секунд
    environment:
      POSTGRES_DB: "db"
      POSTGRES_USER: puser
      POSTGRES_PASSWORD: puser
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./postgres-volumes/init-database/:/docker-entrypoint-initdb.d
      - ./postgres-volumes/postgresql-data/:/var/lib/postgresql/data
    ports:
      - 5433:5432
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
    networks:
      - crm_infrastructure
  # pgadmin
  pgadmin_container:
    container_name: pgadmin
    image: 'dpage/pgadmin4:latest'
    environment:
      PGADMIN_DEFAULT_EMAIL: crm@mail.ru
      PGADMIN_DEFAULT_PASSWORD: puser
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./pgadmin-volumes/pgadmin-data/:/var/lib/pgadmin
    ports:
      - 5434:80
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - crm_infrastructure
  # redis
  redis_container:
    container_name: redis
    image: 'redis:6'
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      # test: ["CMD-SHELL", "redis-cli -a password ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    ports:
      - 6380:6379
    volumes:
      - ./redis-volumes/data/:/data
      - ./redis-volumes/redis.conf/:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=password
      - REDIS_DATABASES=16
      - REDIS_PORT=6379
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - crm_infrastructure
  # rabbitmq
  rabbitmq_container:
    container_name: rabbitmq
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq-volumes:/var/lib/rabbitmq
    ports:
      - 15673:15672
      # amqp
      - 5673:5672
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 0.5G
    networks:
      - crm_infrastructure
  # <<< Can changing count of app
  suppliers2_container:
    container_name: suppliers2
    image: suppliers2
    restart: unless-stopped
    build:
      dockerfile: DockerFile_bpmsoft_net8
      context: ../suppliers2
    ports:
      - 8001:5000
      - 9001:5002
    volumes:
      - ../suppliers2:/app
    depends_on:
      postgres_container:
        condition: service_healthy
      redis_container:
        condition: service_healthy
    networks:
      - crm_infrastructure
  asb_container:
    container_name: asb
    image: asb
    restart: unless-stopped
    build:
      dockerfile: DockerFile_bpmsoft_net8
      context: ../asb
    ports:
      - 8002:5000
      - 9002:5002
    volumes:
      - ../asb:/app
    depends_on:
      postgres_container:
        condition: service_healthy
      redis_container:
        condition: service_healthy
    networks:
      - crm_infrastructure
  bpmsoftdevelopment_container:
    container_name: bpmsoftdevelopment
    image: bpmsoftdevelopment
    restart: unless-stopped
    build:
      dockerfile: DockerFile_bpmsoft_net8
      context: ../bpmsoftdevelopment
    ports:
      - 8003:5000
      - 9003:5002
    volumes:
      - ../bpmsoftdevelopment:/app
    depends_on:
      postgres_container:
        condition: service_healthy
      redis_container:
        condition: service_healthy
    networks:
      - crm_infrastructure
# <<< End changing count of app
networks:
  crm_infrastructure:
    external: true
