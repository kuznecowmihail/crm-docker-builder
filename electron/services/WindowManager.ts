import { BrowserWindow, type BrowserWindowConstructorOptions } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import { ConstantValues } from '../config/constants';

export class WindowManager {
  private mainWindow: BrowserWindow | null = null;

  private getIconPath(): string | undefined {
    console.log('üîç –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    const iconPath = path.join(process.cwd(), 'electron', 'assets', 'icons', 'icon-512x512.png');
    
    if (fs.existsSync(iconPath)) {
      console.log(`‚úÖ –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${iconPath}`);
      return iconPath;
    }

    console.warn('‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞');
    return undefined;
  }

  private createWindowConfig(): BrowserWindowConstructorOptions {
    const iconPath = this.getIconPath();
    
    const config: BrowserWindowConstructorOptions = {
      ...ConstantValues.DEFAULT_WINDOW_CONFIG,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, ConstantValues.PATHS.preload),
      },
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
    if (iconPath) {
      config.icon = iconPath;
    }

    return config;
  }

  public createMainWindow(): BrowserWindow {
    this.mainWindow = new BrowserWindow(this.createWindowConfig());

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞
    const iconPath = this.getIconPath();
    if (iconPath) {
      console.log(`üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞: ${iconPath}`);
      this.mainWindow.setIcon(iconPath);
    }

    console.log('process.env.NODE_ENV', process.env.NODE_ENV);
    console.log('process.resourcesPath', process.resourcesPath);

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º Angular dev server
    if (process.env.NODE_ENV === 'development') {
      this.mainWindow.loadURL(ConstantValues.DEV_SERVER_URL);
      this.mainWindow.webContents.openDevTools();
    } else {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ Angular –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      let appPath: string;
      const defaultAppPath = path.join(process.cwd(), ConstantValues.PATHS.productionApp);
      const resourcesAppPath = path.join(process.resourcesPath, 'app', 'angular-app', 'dist', 'angular-app', 'browser', 'index.html');
      console.log('defaultAppPath', defaultAppPath);
      console.log('resourcesAppPath', resourcesAppPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ exe
      if (process.env.NODE_ENV === 'production' || (process.resourcesPath && fs.existsSync(resourcesAppPath))) {
        // –í —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        appPath = resourcesAppPath;
        console.log('üì¶ –£–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º:', process.resourcesPath);
      } else {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—É—Ç—å
        appPath = defaultAppPath;
      }
      
      console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º Angular –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', appPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (fs.existsSync(appPath)) {
        console.log('‚úÖ –§–∞–π–ª index.html –Ω–∞–π–¥–µ–Ω');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º file:// –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const fileUrl = `file://${appPath.replace(/\\/g, '/')}`;
        console.log('üîó URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', fileUrl);
        
        this.mainWindow.loadURL(fileUrl);
      } else {
        console.error('‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω:', appPath);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        const alternativePaths = [
          path.join(process.cwd(), 'angular-app', 'dist', 'angular-app', 'browser', 'index.html'),
          path.join(__dirname, '..', 'angular-app', 'dist', 'angular-app', 'browser', 'index.html'),
          path.join(process.resourcesPath || '', 'app', 'angular-app', 'dist', 'angular-app', 'browser', 'index.html')
        ];
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏:');
        for (const altPath of alternativePaths) {
          console.log(`  - ${altPath}: ${fs.existsSync(altPath) ? '‚úÖ' : '‚ùå'}`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        this.mainWindow.loadURL(`data:text/html,
          <html>
            <head><title>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</title></head>
            <body">
              <p>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª: <code>${appPath}</code></p>
              <p><strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong></p>
              <ul>
                <li>process.cwd(): ${process.cwd()}</li>
                <li>__dirname: ${__dirname}</li>
                <li>process.resourcesPath: ${process.resourcesPath || 'undefined'}</li>
                <li>NODE_ENV: ${process.env.NODE_ENV || 'undefined'}</li>
              </ul>
              <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Angular –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
            </body>
          </html>
        `);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    this.mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', {
        errorCode,
        errorDescription,
        validatedURL
      });
    });

    this.mainWindow.webContents.on('did-finish-load', () => {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    });

    this.mainWindow.webContents.on('dom-ready', () => {
      console.log('‚úÖ DOM –≥–æ—Ç–æ–≤');
    });

    return this.mainWindow;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
   * @returns - –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
   */
  public getMainWindow(): BrowserWindow | null {
    return this.mainWindow;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
   */
  public closeMainWindow(): void {
    if (this.mainWindow) {
      this.mainWindow.close();
      this.mainWindow = null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∫–Ω–∞
   * @returns - –≤—Å–µ –æ–∫–Ω–∞
   */
  public getAllWindows(): BrowserWindow[] {
    return BrowserWindow.getAllWindows();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–∫–æ–Ω
   * @returns - true, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∫–Ω–∞
   */
  public hasWindows(): boolean {
    return this.getAllWindows().length > 0;
  }
}
